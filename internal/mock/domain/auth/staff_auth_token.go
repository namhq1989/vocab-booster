// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/auth/domain/staff_auth_token.go
//
// Generated by this command:
//
//	mockgen -source=pkg/auth/domain/staff_auth_token.go -destination=internal/mock/domain/auth/staff_auth_token.go -package=mockauth
//

// Package mockauth is a generated GoMock package.
package mockauth

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/vocab-booster-server-admin/core/appcontext"
	domain "github.com/namhq1989/vocab-booster-server-admin/pkg/auth/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockStaffAuthTokenRepository is a mock of StaffAuthTokenRepository interface.
type MockStaffAuthTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStaffAuthTokenRepositoryMockRecorder
}

// MockStaffAuthTokenRepositoryMockRecorder is the mock recorder for MockStaffAuthTokenRepository.
type MockStaffAuthTokenRepositoryMockRecorder struct {
	mock *MockStaffAuthTokenRepository
}

// NewMockStaffAuthTokenRepository creates a new mock instance.
func NewMockStaffAuthTokenRepository(ctrl *gomock.Controller) *MockStaffAuthTokenRepository {
	mock := &MockStaffAuthTokenRepository{ctrl: ctrl}
	mock.recorder = &MockStaffAuthTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStaffAuthTokenRepository) EXPECT() *MockStaffAuthTokenRepositoryMockRecorder {
	return m.recorder
}

// CreateAuthToken mocks base method.
func (m *MockStaffAuthTokenRepository) CreateAuthToken(ctx *appcontext.AppContext, token domain.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthToken indicates an expected call of CreateAuthToken.
func (mr *MockStaffAuthTokenRepositoryMockRecorder) CreateAuthToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthToken", reflect.TypeOf((*MockStaffAuthTokenRepository)(nil).CreateAuthToken), ctx, token)
}

// DeleteAuthToken mocks base method.
func (m *MockStaffAuthTokenRepository) DeleteAuthToken(ctx *appcontext.AppContext, tokenID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthToken", ctx, tokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthToken indicates an expected call of DeleteAuthToken.
func (mr *MockStaffAuthTokenRepositoryMockRecorder) DeleteAuthToken(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthToken", reflect.TypeOf((*MockStaffAuthTokenRepository)(nil).DeleteAuthToken), ctx, tokenID)
}

// FindAuthToken mocks base method.
func (m *MockStaffAuthTokenRepository) FindAuthToken(ctx *appcontext.AppContext, refreshToken string) (*domain.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAuthToken", ctx, refreshToken)
	ret0, _ := ret[0].(*domain.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAuthToken indicates an expected call of FindAuthToken.
func (mr *MockStaffAuthTokenRepositoryMockRecorder) FindAuthToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAuthToken", reflect.TypeOf((*MockStaffAuthTokenRepository)(nil).FindAuthToken), ctx, refreshToken)
}
