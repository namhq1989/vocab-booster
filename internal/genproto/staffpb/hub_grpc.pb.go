// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: staffpb/hub.proto

package staffpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StaffService_FindUserByID_FullMethodName    = "/staffpb.StaffService/FindUserByID"
	StaffService_FindUserByEmail_FullMethodName = "/staffpb.StaffService/FindUserByEmail"
)

// StaffServiceClient is the client API for StaffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffServiceClient interface {
	FindUserByID(ctx context.Context, in *FindStaffByIDRequest, opts ...grpc.CallOption) (*FindStaffByIDResponse, error)
	FindUserByEmail(ctx context.Context, in *FindStaffByEmailRequest, opts ...grpc.CallOption) (*FindStaffByEmailResponse, error)
}

type staffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffServiceClient(cc grpc.ClientConnInterface) StaffServiceClient {
	return &staffServiceClient{cc}
}

func (c *staffServiceClient) FindUserByID(ctx context.Context, in *FindStaffByIDRequest, opts ...grpc.CallOption) (*FindStaffByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindStaffByIDResponse)
	err := c.cc.Invoke(ctx, StaffService_FindUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) FindUserByEmail(ctx context.Context, in *FindStaffByEmailRequest, opts ...grpc.CallOption) (*FindStaffByEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindStaffByEmailResponse)
	err := c.cc.Invoke(ctx, StaffService_FindUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServiceServer is the server API for StaffService service.
// All implementations should embed UnimplementedStaffServiceServer
// for forward compatibility
type StaffServiceServer interface {
	FindUserByID(context.Context, *FindStaffByIDRequest) (*FindStaffByIDResponse, error)
	FindUserByEmail(context.Context, *FindStaffByEmailRequest) (*FindStaffByEmailResponse, error)
}

// UnimplementedStaffServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStaffServiceServer struct {
}

func (UnimplementedStaffServiceServer) FindUserByID(context.Context, *FindStaffByIDRequest) (*FindStaffByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByID not implemented")
}
func (UnimplementedStaffServiceServer) FindUserByEmail(context.Context, *FindStaffByEmailRequest) (*FindStaffByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByEmail not implemented")
}

// UnsafeStaffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServiceServer will
// result in compilation errors.
type UnsafeStaffServiceServer interface {
	mustEmbedUnimplementedStaffServiceServer()
}

func RegisterStaffServiceServer(s grpc.ServiceRegistrar, srv StaffServiceServer) {
	s.RegisterService(&StaffService_ServiceDesc, srv)
}

func _StaffService_FindUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStaffByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).FindUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_FindUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).FindUserByID(ctx, req.(*FindStaffByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_FindUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStaffByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).FindUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_FindUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).FindUserByEmail(ctx, req.(*FindStaffByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StaffService_ServiceDesc is the grpc.ServiceDesc for StaffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staffpb.StaffService",
	HandlerType: (*StaffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUserByID",
			Handler:    _StaffService_FindUserByID_Handler,
		},
		{
			MethodName: "FindUserByEmail",
			Handler:    _StaffService_FindUserByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staffpb/hub.proto",
}
